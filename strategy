PROGRAM -> DECLARATION_LIST
DECLARATION_LIST -> DECLARATION_LIST DECLARATION | DECLARATION #uses next
DECLARATION -> VAR_DEC | FUN_DEC
VAR_DEC -> TYPE_SPECIFIER < id> ; | TYPE_SPECIFIER *<id> ; |  TYPE_SPECIFIER <id>[ <num>  ] ;
TYPE_SPECIFIER -> int | void | string
FUN_DEC -> TYPE_SPECIFIER <id> ( PARAMS ) COMPOUND_STMT
PARAMS -> void | PARAM_LIST
PARAM_LIST -> PARAM_LIST , PARAM |  PARAM   #uses next
PARAM ->  TYPE_SPECIFIER  <id> |  TYPE_SPECIFIER * < id >  |TYPE_SPECIFIER <id>[   ] # make sure they aren't void
COMPOUND_STATEMENT -> { LOCAL_DECS STATEMENT_LIST }
LOCAL_DECS -> LOCAL_DECS VAR_DEC | <empty> #uses next
STATEMENT_LIST -> STATEMENT_LIST STATEMENT | <empty> #uses next
STATEMENT -> EXPRESSION_STMT | COMPOUND_STATEMENT | IF_STMT | WHILE_STMT | RETURN_STMT | WRITE_STMT
EXPRESSION_STMT -> EXPRESSION;
IF_STMT -> if ( EXPRESSION ) STATEMENT | if ( EXPRESSION ) STATEMENT else STATEMENT
WHILE_STMT -> while ( EXPRESSION ) statement
RETURN_STMT -> return ; |  return EXPRESSION ;
WRITE_STMT -> write ( EXRESSION ) ; |  writeln (   ) ;
EXPRESSION -> COMP_EXP = EXPRESSION | COMP_EXP          #check isLNode
VAR -> * <id> | <id> [expression] | <id>
COMP_EXP -> E RELOP E | E
RELOP -> <= | < | == | != | > | >=
E -> E ADDOP T | T
ADDOP -> + | -
T -> T MULOP F | F
MULOP -> * | / | %
F -> -F | &FACTOR | *FACTOR | FACTOR
FACTOR -> ( EXPRESSION ) | read() | FUN_CALL | LIT | VAR
FUN_CALL -> <id> ( ARGS )
ARGS -> ARG_LIST | <empty>
ARG_LIST -> ARG_LIST , EXPRESSION | EXPRESSION #uses next
LIT -> <string> | <int>
